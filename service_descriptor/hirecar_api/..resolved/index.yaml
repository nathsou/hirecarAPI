openapi: 3.0.0
info:
  title: HireCar API
  description: HireCar API
  contact:
    email: hirecar@example.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.0
tags:
  - name: admins
    description: Secured Admin-only calls
  - name: developers
    description: Operations available to regular developers
paths:
  /parking_lots:
    get:
      tags:
        - developers
      summary: searches parking lots
      description: |
        Query parking lots filtered by some common criteria
      operationId: searchParkingLots
      parameters:
        - name: airport_name
          in: query
          description: name of the airport(s)
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: airport_id
          in: query
          description: id of the airport
          required: false
          style: form
          explode: true
          schema:
            minimum: 1
            type: integer
            format: int32
        - name: center_lat
          in: query
          description: the latitude of the center of the searching circle
          required: false
          style: form
          explode: true
          schema:
            maximum: 90
            minimum: -90
            type: number
            format: float
        - name: center_lng
          in: query
          description: the latitude of the center of the searching circle
          required: false
          style: form
          explode: true
          schema:
            maximum: 180
            minimum: -180
            type: number
            format: float
        - name: radius
          in: query
          description: the radius of the searching circle
          required: false
          style: form
          explode: true
          schema:
            minimum: 0
            type: number
            format: float
        - name: min_capacity
          in: query
          description: the minimum number of parking spots
          required: false
          style: form
          explode: true
          schema:
            minimum: 0
            type: integer
            format: int32
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items: &ref_0
                  required:
                    - airport
                    - capacity
                    - id
                    - label
                    - lat
                    - lng
                    - price_per_day
                  type: object
                  properties:
                    id:
                      minimum: 1
                      type: integer
                      format: int32
                      example: 31
                    label:
                      type: string
                      example: Paris Charles de Gaulle - Terminal D1
                    lat:
                      maximum: 90
                      minimum: -90
                      type: number
                      format: float
                      example: 49.0013
                    lng:
                      maximum: 180
                      minimum: -180
                      type: number
                      format: float
                      example: 2.54
                    capacity:
                      minimum: 0
                      type: integer
                      format: int32
                      example: 54
                    price_per_day:
                      minimum: 0
                      type: number
                      format: float
                      example: 12.5
                    airport: &ref_3
                      required:
                        - id
                        - lat
                        - lng
                        - name
                      type: object
                      properties:
                        id:
                          type: integer
                          format: int32
                          example: 64
                        name:
                          type: string
                          example: Paris-Charles-De-Gaulle
                        lat:
                          maximum: 90
                          minimum: -90
                          type: number
                          format: float
                          example: 49.0013
                        lng:
                          maximum: 180
                          minimum: -180
                          type: number
                          format: float
                          example: 2.54
        '400':
          description: incorrect parameters
    put:
      tags:
        - admins
      summary: add a parking lot
      description: Inserts a parking lot in the database
      operationId: insertParkingLot
      requestBody:
        description: Parking lot to add
        content:
          application/json:
            schema:
              required:
                - airport_id
                - capacity
                - id
                - label
                - lat
                - lng
                - price_per_day
              type: object
              properties:
                id:
                  minimum: 1
                  type: integer
                  format: int32
                  example: 31
                label:
                  type: string
                  example: Paris Charles de Gaulle - Terminal D1
                lat:
                  maximum: 90
                  minimum: -90
                  type: number
                  format: float
                  example: 49.0013
                lng:
                  maximum: 180
                  minimum: -180
                  type: number
                  format: float
                  example: 2.54
                capacity:
                  minimum: 0
                  type: integer
                  format: int32
                  example: 54
                price_per_day:
                  minimum: 0
                  type: number
                  format: float
                  example: 12.5
                airport_id:
                  minimum: 1
                  type: integer
                  format: int32
                  example: 32
      responses:
        '201':
          description: parking lot created
        '400':
          description: invalid input
        '409':
          description: a parking lot with the same label already exists
  /parking_spot_rentals:
    get:
      tags:
        - developers
      summary: searches parking spot rentals
      description: |
        Query parking spots rentals by some common criteria
      operationId: searchParkingSpotRentals
      parameters:
        - name: airport_name
          in: query
          description: name of the airport(s)
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: airport_id
          in: query
          description: id of the airport
          required: false
          style: form
          explode: true
          schema:
            minimum: 1
            type: integer
            format: int32
        - name: owner_id
          in: query
          description: id of the car's owner on the parking spot
          required: false
          style: form
          explode: true
          schema:
            minimum: 1
            type: integer
            format: int32
        - name: car_id
          in: query
          description: id of the car on the parking spot
          required: false
          style: form
          explode: true
          schema:
            minimum: 1
            type: integer
            format: int32
        - name: id
          in: query
          description: id of the parking spot rental
          required: false
          style: form
          explode: true
          schema:
            minimum: 1
            type: integer
            format: int32
        - name: start_date
          in: query
          description: the start date of the parking spot rental
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: date-time
        - name: end_date
          in: query
          description: the end date of the parking spot rental circle
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items: &ref_4
                  required:
                    - id
                    - start_date
                    - end_date
                    - car
                    - parking_lot
                  type: object
                  properties:
                    id:
                      minimum: 1
                      type: integer
                      format: int32
                      example: 46
                    start_date:
                      type: string
                      format: date-time
                      example: 2019-06-02T10:00:00.000Z
                    end_date:
                      type: string
                      format: date-time
                      example: 2019-06-12T10:00:00.000Z
                    car: &ref_1
                      required:
                        - id
                        - model
                        - seats
                        - doors
                        - owner_id
                        - price_per_day
                        - gearbox
                        - fuel
                      type: object
                      properties:
                        id:
                          minimum: 1
                          type: integer
                          format: int32
                          example: 105
                        model:
                          type: string
                          example: Tesla Model S
                        seats:
                          minimum: 1
                          type: integer
                          format: int32
                          example: 5
                        doors:
                          minimum: 1
                          type: integer
                          format: int32
                          example: 5
                        owner_id:
                          minimum: 1
                          type: integer
                          format: int32
                          example: 13
                        price_per_day:
                          minimum: 1
                          type: number
                          format: float
                          example: 130.99
                        gearbox: &ref_5
                          required:
                            - id
                            - type
                          type: object
                          properties:
                            id:
                              minimum: 1
                              type: integer
                              format: int32
                              example: 1
                            type:
                              type: string
                              example: Automatique
                        fuel: &ref_6
                          required:
                            - id
                            - type
                          type: object
                          properties:
                            id:
                              minimum: 1
                              type: integer
                              format: int32
                              example: 4
                            type:
                              type: string
                              example: Électrique
                    parking_lot: *ref_0
        '400':
          description: incorrect parameters
    post:
      tags:
        - admins
      summary: add a parking spot rental
      description: Inserts a parking spot rental in the database
      operationId: insertParkingSpotRental
      requestBody:
        description: Parking spot rental to add
        content:
          application/json:
            schema:
              required:
                - start_date
                - end_date
                - car_id
                - parking_lot_id
              type: object
              properties:
                start_date:
                  type: string
                  format: date-time
                  example: 2019-06-02T10:00:00.000Z
                end_date:
                  type: string
                  format: date-time
                  example: 2019-06-02T10:00:00.000Z
                car_id:
                  minimum: 1
                  type: integer
                  format: int32
                  example: 105
                parking_lot_id:
                  minimum: 1
                  type: integer
                  format: int32
                  example: 5
      responses:
        '201':
          description: parking spot created
        '400':
          description: invalid input
  '/parking_spot_rentals/{parkingSpotId}':
    delete:
      tags:
        - admins
      summary: delete a parking spot rental
      description: Deletes a parking spot rental in the database
      operationId: deleteParkingSpotRental
      parameters:
        - name: id
          in: path
          description: id of the parking spot rental
          required: true
          style: simple
          explode: true
          schema:
            minimum: 1
            type: integer
            format: int32
      responses:
        '200':
          description: parking spot deleted
        '400':
          description: invalid parking spot rental id
  /cars:
    get:
      tags:
        - developers
      summary: searches cars
      description: |
        Query cars filtered by some common criteria
      operationId: searchCars
      parameters:
        - name: min_price
          in: query
          description: the minimum price of the car per day
          required: false
          style: form
          explode: true
          schema:
            minimum: 1
            type: number
            format: float
        - name: max_price
          in: query
          description: the maximum price of the car per day
          required: false
          style: form
          explode: true
          schema:
            minimum: 1
            type: number
            format: float
        - name: min_seats
          in: query
          description: the minimum seats of the car
          required: false
          style: form
          explode: true
          schema:
            minimum: 1
            type: integer
            format: int32
        - name: min_doors
          in: query
          description: the minimum doors of the car
          required: false
          style: form
          explode: true
          schema:
            minimum: 1
            type: integer
            format: int32
        - name: id
          in: query
          description: id of the car
          required: false
          style: form
          explode: true
          schema:
            minimum: 1
            type: integer
            format: int32
        - name: gearbox
          in: query
          description: gearbox of the car
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: fuel
          in: query
          description: fuel of the car
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: model
          in: query
          description: model of the car
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: owner_id
          in: query
          description: id of the car's owner
          required: false
          style: form
          explode: true
          schema:
            minimum: 1
            type: integer
            format: int32
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items: *ref_1
        '400':
          description: incorrect parameters
    post:
      tags:
        - admins
      summary: add a car
      description: Inserts a car in the database
      operationId: insertCar
      requestBody:
        description: Car to add
        content:
          application/json:
            schema: &ref_2
              required:
                - model
                - seats
                - doors
                - owner_id
                - gearbox_id
                - fuel_id
                - price_per_day
              type: object
              properties:
                model:
                  type: string
                  example: Tesla Model S
                seats:
                  minimum: 1
                  type: integer
                  format: int32
                  example: 5
                doors:
                  minimum: 1
                  type: integer
                  format: int32
                  example: 5
                owner_id:
                  minimum: 1
                  type: integer
                  format: int32
                  example: 13
                gearbox_id:
                  minimum: 1
                  type: integer
                  format: int32
                  example: 2
                fuel_id:
                  minimum: 1
                  type: integer
                  format: int32
                  example: 2
                price_per_day:
                  minimum: 1
                  type: number
                  format: float
                  example: 130.99
      responses:
        '201':
          description: car created
        '400':
          description: invalid input
  '/cars/{carId}':
    put:
      tags:
        - admins
      summary: update an existing car
      description: Updates an existing car in the database
      operationId: updateCar
      parameters:
        - name: id
          in: path
          description: id of the car
          required: true
          style: simple
          explode: true
          schema:
            minimum: 1
            type: integer
            format: int32
      requestBody:
        description: Car to update
        content:
          application/json:
            schema: *ref_2
      responses:
        '200':
          description: car updated
        '400':
          description: invalid car id
    delete:
      tags:
        - admins
      summary: delete a car
      description: Deletes a car in the database
      operationId: deleteCar
      parameters:
        - name: id
          in: path
          description: id of the car
          required: true
          style: simple
          explode: true
          schema:
            minimum: 1
            type: integer
            format: int32
      responses:
        '200':
          description: car deleted
        '400':
          description: invalid car id
  /users:
    post:
      tags:
        - admins
      summary: add a user
      description: Inserts a user in the database
      operationId: insertUser
      requestBody:
        description: User to add
        content:
          application/json:
            schema:
              required:
                - firstname
                - lastname
                - email
                - phone
                - password
                - login_id
              type: object
              properties:
                firstname:
                  type: string
                  example: Marty
                lastname:
                  type: string
                  example: McFly
                email:
                  type: string
                  example: marty@delorean.com
                phone:
                  type: string
                  example: 0123456789
                password:
                  type: string
                  example: $2a$10$5p/XjRv1Kw9OIqzg4t186eV1UxpYxFTyXR4KZmABZaxV/.QlAscNe
                login_id:
                  minimum: 1
                  type: integer
                  format: int32
                  example: 1
      responses:
        '201':
          description: user created
        '400':
          description: invalid input
        '409':
          description: email address already used
  '/users/{userId}':
    put:
      tags:
        - admins
      summary: update an existing user
      description: Updates an existing user in the database
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: id of the user
          required: true
          style: simple
          explode: true
          schema:
            minimum: 1
            type: integer
            format: int32
      requestBody:
        description: User to update
        content:
          application/json:
            schema:
              required:
                - firstname
                - lastname
                - email
                - phone
                - password
                - new_password
              type: object
              properties:
                firstname:
                  type: string
                  example: Marty
                lastname:
                  type: string
                  example: McFly
                email:
                  type: string
                  example: marty@delorean.com
                phone:
                  type: string
                  example: 0123456789
                password:
                  type: string
                  example: $2a$10$5p/XjRv1Kw9OIqzg4t186eV1UxpYxFTyXR4KZmABZaxV/.QlAscNe
                new_password:
                  type: string
                  example: $2a$10$5p/XjRv1Kw9OIqzg4t186eBMfo.3JXzZl4a9Fk9qZpC4MGwPzg.aq
      responses:
        '200':
          description: user updated
        '400':
          description: invalid user value
  /verify_paiement:
    $ref: ./verify_paiement.yaml
  /car_rentals:
    $ref: ./cars_rentals.yaml
components:
  schemas:
    ParkingLot: *ref_0
    Airport: *ref_3
    ParkingSpotRental: *ref_4
    Car: *ref_1
    Gearbox: *ref_5
    Fuel: *ref_6
